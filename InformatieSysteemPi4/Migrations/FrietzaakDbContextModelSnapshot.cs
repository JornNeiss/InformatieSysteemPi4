// <auto-generated />
using System;
using InformatieSysteemPi4.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InformatieSysteemPi4.Migrations
{
    [DbContext(typeof(FrietzaakDbContext))]
    partial class FrietzaakDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InformatieSysteemPi4.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountID"));

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountID");

                    b.HasIndex("ProductID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickUpTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DiscountID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.PreviousOrder", b =>
                {
                    b.Property<int>("PreviousOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreviousOrderID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("PreviousOrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderID");

                    b.ToTable("PreviousOrders");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 4,
                            Category = "Friet",
                            ImageURL = "/images/Kleine friet.jpeg",
                            IsAvailable = true,
                            IsOnSale = true,
                            Name = "Kleine friet",
                            Price = 2.00m,
                            SalePrice = 1.00m
                        },
                        new
                        {
                            ProductID = 5,
                            Category = "Friet",
                            ImageURL = "/images/Medium.jpeg",
                            IsAvailable = true,
                            IsOnSale = false,
                            Name = "Medium Friet",
                            Price = 2.00m,
                            SalePrice = 175.00m
                        },
                        new
                        {
                            ProductID = 7,
                            Category = "Friet",
                            ImageURL = "/images/Grote friet.jpeg",
                            IsAvailable = true,
                            IsOnSale = true,
                            Name = "Grote Friet",
                            Price = 4.00m,
                            SalePrice = 3.00m
                        },
                        new
                        {
                            ProductID = 8,
                            Category = "Snack",
                            ImageURL = "/images/Frikandel.jpg",
                            IsAvailable = true,
                            IsOnSale = true,
                            Name = "Frikandel",
                            Price = 2.00m,
                            SalePrice = 1.00m
                        },
                        new
                        {
                            ProductID = 9,
                            Category = "Snack",
                            ImageURL = "/images/kroket.png",
                            IsAvailable = true,
                            IsOnSale = false,
                            Name = "Kroket",
                            Price = 2.00m,
                            SalePrice = 1.00m
                        },
                        new
                        {
                            ProductID = 10,
                            Category = "Snack",
                            ImageURL = "/images/Bitterball.jpg",
                            IsAvailable = true,
                            IsOnSale = true,
                            Name = "Bitterballen",
                            Price = 4.00m,
                            SalePrice = 3.00m
                        },
                        new
                        {
                            ProductID = 12,
                            Category = "Snack",
                            ImageURL = "/images/Nuggets.jpg",
                            IsAvailable = false,
                            IsOnSale = true,
                            Name = "Kip nuggets (14 stuks)",
                            Price = 3.00m,
                            SalePrice = 2.00m
                        },
                        new
                        {
                            ProductID = 13,
                            Category = "Snack",
                            ImageURL = "/images/bamihap.png",
                            IsAvailable = true,
                            IsOnSale = false,
                            Name = "Bami schijf",
                            Price = 2.00m,
                            SalePrice = 150.00m
                        },
                        new
                        {
                            ProductID = 14,
                            Category = "Snack",
                            ImageURL = "/images/Berenklauw.png",
                            IsAvailable = true,
                            IsOnSale = false,
                            Name = "Berenklauw",
                            Price = 2.00m,
                            SalePrice = 150.00m
                        },
                        new
                        {
                            ProductID = 15,
                            Category = "saus",
                            ImageURL = "/images/Frietsaus.jpeg",
                            IsAvailable = true,
                            IsOnSale = false,
                            Name = "Friet saus",
                            Price = 1.00m,
                            SalePrice = 12.00m
                        },
                        new
                        {
                            ProductID = 16,
                            Category = "saus",
                            ImageURL = "/images/BBQ.jpeg",
                            IsAvailable = true,
                            IsOnSale = true,
                            Name = "BBQ saus",
                            Price = 2.00m,
                            SalePrice = 0.00m
                        },
                        new
                        {
                            ProductID = 18,
                            Category = "saus",
                            ImageURL = "/images/jalapeno saus.jpeg",
                            IsAvailable = true,
                            IsOnSale = false,
                            Name = "Jappeleno saus",
                            Price = 1.00m,
                            SalePrice = 12.00m
                        },
                        new
                        {
                            ProductID = 19,
                            Category = "Drankje",
                            ImageURL = "/images/Cola.png",
                            IsAvailable = true,
                            IsOnSale = false,
                            Name = "Coca cola",
                            Price = 2.00m,
                            SalePrice = 3.00m
                        },
                        new
                        {
                            ProductID = 20,
                            Category = "Drankje",
                            ImageURL = "/images/Fanta.png",
                            IsAvailable = true,
                            IsOnSale = false,
                            Name = "Fanta",
                            Price = 2.00m,
                            SalePrice = 3.00m
                        },
                        new
                        {
                            ProductID = 21,
                            Category = "Drankje",
                            ImageURL = "/images/Red bull.jpg",
                            IsAvailable = true,
                            IsOnSale = true,
                            Name = "Red bull",
                            Price = 4.00m,
                            SalePrice = 3.00m
                        });
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.CartItem", b =>
                {
                    b.HasOne("InformatieSysteemPi4.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Discount", b =>
                {
                    b.HasOne("InformatieSysteemPi4.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Order", b =>
                {
                    b.HasOne("InformatieSysteemPi4.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InformatieSysteemPi4.Models.Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.OrderDetail", b =>
                {
                    b.HasOne("InformatieSysteemPi4.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InformatieSysteemPi4.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.PreviousOrder", b =>
                {
                    b.HasOne("InformatieSysteemPi4.Models.Customer", "Customer")
                        .WithMany("PreviousOrders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InformatieSysteemPi4.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PreviousOrders");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Discount", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("InformatieSysteemPi4.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
